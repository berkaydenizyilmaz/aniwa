// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Kullanıcı Rollerini tanımlayan Enum
enum UserRole {
  USER
  MODERATOR
  EDITOR
  ADMIN
}

// Log Seviyelerini tanımlayan Enum
enum LogLevel {
  ERROR
  WARN
  INFO
  DEBUG
}

// Genel Doğrulama Token Modeli (Email doğrulama, şifre sıfırlama vb.)
model VerificationToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   
  token     String   @unique
  type      String   // "email_verification", "password_reset", "email_change"
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  // TTL index - MongoDB otomatik silme için
  @@index([expiresAt], map: "verification_ttl")
}

// Kullanıcı Bilgileri Modeli
model User {
  id             String                @id @default(auto()) @map("_id") @db.ObjectId
  username       String                @unique
  email          String                @unique
  emailVerified  DateTime?
  image          String?
  passwordHash   String?
  profilePicture String?
  profileBanner  String?
  bio            String?               @db.String
  roles          UserRole[]            @default([USER])
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt

  // Uygulama relations
  userSettings   UserProfileSettings?
  logs           Log[]
}

// Kullanıcıya Özel Ayarlar ve Tercihler Modeli
model UserProfileSettings {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  userId                String   @unique @db.ObjectId
  
  themePreference       String   @default("system")
  languagePreference    String   @default("tr")
  
  notificationPreferences Json?
  privacySettings       Json?
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// OAuth Geçici Kullanıcı Modeli
model OAuthPendingUser {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  email      String   @unique
  provider   String   // "google", "github" vs
  providerId String   // Provider'dan gelen ID
  name       String?
  image      String?
  token      String   @unique // Random verification token
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  @@index([expiresAt], map: "oauth_pending_ttl")
}

// Log Modeli
model Log {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  timestamp DateTime @default(now())
  level     LogLevel
  event     String
  message   String
  metadata  Json?

  userId    String?  @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])
}