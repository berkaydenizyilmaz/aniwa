// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Kullanıcı Rollerini tanımlayan Enum
enum UserRole {
  USER
  MODERATOR
  EDITOR
  ADMIN
}

// Log Seviyelerini tanımlayan Enum
enum LogLevel {
  ERROR
  WARN
  INFO
  DEBUG
}

// NextAuth için gerekli modeller
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Kullanıcı Bilgileri Modeli
model User {
  id             String                @id @default(auto()) @map("_id") @db.ObjectId
  username       String                @unique
  email          String                @unique
  emailVerified  DateTime?
  name           String?
  image          String?
  passwordHash   String?
  profilePicture String?
  profileBanner  String?
  bio            String?               @db.String
  role           UserRole              @default(USER)
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt

  // NextAuth relations
  accounts       Account[]
  sessions       Session[]
  
  // Uygulama relations
  userSettings   UserProfileSettings?
  logs           Log[]
}

// Kullanıcıya Özel Ayarlar ve Tercihler Modeli
model UserProfileSettings {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  userId                String   @unique @db.ObjectId
  
  themePreference       String   @default("system")
  languagePreference    String   @default("tr")
  
  notificationPreferences Json?
  privacySettings       Json?
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Log Modeli
model Log {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  timestamp DateTime @default(now())
  level     LogLevel
  event     String
  message   String
  metadata  Json?

  userId    String?  @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])
}